#include <iostream> 
#include <vector>
#include <algorithm>
using namespace std;

int N, M; //떡의 갯수 N , 요청한 떡의 길이 M

vector <int> a; //떡이 들어가 있는 갯수

int main() {
	cin >> N >> M; 
	for (int i = 0; i < N; i++)
	{
		int x; 
		cin >> x;
		a.push_back(x);
	}
	// 최댓값을 설정해서, 목표하는 값에 맞출 수 있도록 하나씩 줄 여가야 함.
	sort(a.begin(), a.end());
	int target; // 절단기에 설정하는 높이. 최댓값이 되어야 하므로 제일 큰 값에서 하나씩 내려와야 함.
	target = a[N - 1];
	int sum=0;
	while (sum < M)
	{
		sum = 0;
		for (int i = 0; i < N; i++)
		{
			sum += max(0,a[i] - target); // 음수값이 들어가는 경우는 없음. 따라서 0이하의 값이 들어가서는 안됨.
		}
		if (sum < M)
			target--;
	}
	cout << target << "\n";
}
</br> // 이런식으로 푼다면 시간 제한에 걸릴 수도 있다. 따라서 소스 코드를 다르게 적는다. </br></br>
#include <iostream> 
#include <vector>
#include <algorithm>
using namespace std;

int N, M; //떡의 갯수 N , 요청한 떡의 길이 M

vector <int> a; //떡이 들어가 있는 갯수

int main() {
	cin >> N >> M; 
	for (int i = 0; i < N; i++)
	{
		int x; 
		cin >> x;
		a.push_back(x);
	}
	// 최댓값을 설정해서, 목표하는 값에 맞출 수 있도록 하나씩 줄 여가야 함.
	sort(a.begin(), a.end());
	int target=0; // 절단기에 설정하는 높이. 최댓값이 되어야 하므로 제일 큰 값에서 하나씩 내려와야 함.
	int end = a[N - 1];
	int start = 0;
	while (start <= end)
	{
		long long int sum = 0;
		int middle = (start + end) / 2;
		for (int i = 0; i < N; i++)
		{
			if (a[i] > middle)
				sum += a[i] - middle;
		}
		if (sum < M) {
			end = middle - 1;
		}
		else  {
			target = middle;
			start = middle + 1;
		}
	}
	cout << target;
}
// 4 6
// 19 10 17 15
